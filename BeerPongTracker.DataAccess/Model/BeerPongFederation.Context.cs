//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BeerPongTracker.DataAccess.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BeerPongFederationEntities : DbContext
    {
        public BeerPongFederationEntities()
            : base("name=BeerPongFederationEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CupTracker> CupTracker { get; set; }
        public virtual DbSet<Game> Game { get; set; }
        public virtual DbSet<GameSetting> GameSetting { get; set; }
        public virtual DbSet<Player> Player { get; set; }
        public virtual DbSet<PlayerGame> PlayerGame { get; set; }
        public virtual DbSet<Setting> Setting { get; set; }
    
        public virtual ObjectResult<PlayerNameSearch_Result> PlayerNameSearch(string query)
        {
            var queryParameter = query != null ?
                new ObjectParameter("Query", query) :
                new ObjectParameter("Query", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PlayerNameSearch_Result>("PlayerNameSearch", queryParameter);
        }
    
        public virtual ObjectResult<GetAvailableGames_Result> GetAvailableGames(Nullable<System.DateTime> startDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAvailableGames_Result>("GetAvailableGames", startDateParameter);
        }
    }
}
